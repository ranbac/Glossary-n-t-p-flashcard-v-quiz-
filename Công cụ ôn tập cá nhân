// Đăng ký shortcode [my_study_tool]
add_shortcode('my_study_tool', 'render_study_tool_app');

function render_study_tool_app() {
    // Bắt đầu bộ đệm đầu ra để lưu HTML
    ob_start();
    ?>
    <style>
        /* CSS cho toàn bộ công cụ, tương tự như phiên bản trước */
        #study-tool-app { font-family: sans-serif; }
        .st-nav-tabs { display: flex; border-bottom: 2px solid #e2e8f0; margin-bottom: 25px; }
        .st-nav-tab { padding: 12px 20px; cursor: pointer; font-weight: 600; color: #4a5568; border-bottom: 3px solid transparent; margin-bottom: -2px; }
        .st-nav-tab.active { color: #2b6cb0; border-color: #2b6cb0; }
        .st-view-content.hidden { display: none; }
        
        /* CSS Quản lý danh sách */
        .st-term-item { display: flex; align-items: flex-start; justify-content: space-between; padding: 16px; border: 1px solid #e2e8f0; border-radius: 8px; margin-bottom: 12px; }
        .st-term-item:hover { background-color: #f7fafc; }
        .st-term-content { flex-grow: 1; padding-right: 16px; }
        .st-term-content h3 { margin: 0 0 5px 0; font-size: 1.2em; }
        .st-term-content p { margin: 0; color: #718096; }
        .st-delete-btn { background: #fed7d7; color: #9b2c2c; border: none; font-weight: bold; border-radius: 5px; padding: 5px 10px; cursor: pointer; }

        /* CSS Flashcard */
        .card-container { perspective: 1000px; height: 280px; }
        .card-inner { position: relative; width: 100%; height: 100%; transition: transform 0.6s; transform-style: preserve-3d; }
        .card-container.flipped .card-inner { transform: rotateY(180deg); }
        .card-front, .card-back { position: absolute; width: 100%; height: 100%; -webkit-backface-visibility: hidden; backface-visibility: hidden; display: flex; justify-content: center; align-items: center; padding: 2rem; text-align: center; border-radius: 0.75rem; box-shadow: 0 4px 6px rgba(0,0,0,0.1); border: 1px solid #e2e8f0; }
        .card-front { font-size: 2em; font-weight: 700; background: #fff; }
        .card-back { transform: rotateY(180deg); background: #ebf8ff; color: #2a4365; font-size: 1.2em; }
        .flashcard-nav { display:flex; justify-content: space-between; align-items: center; margin-top: 20px; }

        /* CSS Quiz */
        .quiz-option-btn { display: block; width: 100%; text-align: left; padding: 15px; margin-bottom: 10px; border: 2px solid #e2e8f0; border-radius: 8px; background-color: #fff; cursor: pointer; transition: all 0.2s; }
        .quiz-option-btn:hover { border-color: #4299e1; background-color: #ebf8ff; }
        .quiz-option-btn.correct { background-color: #c6f6d5 !important; border-color: #38a169 !important; }
        .quiz-option-btn.wrong { background-color: #fed7d7 !important; border-color: #e53e3e !important; }
    </style>

    <div id="study-tool-app">
        <nav class="st-nav-tabs">
            <button data-view="manage" class="st-nav-tab active">Quản lý danh sách</button>
            <button data-view="flashcards" class="st-nav-tab">Flashcards</button>
            <button data-view="quiz" class="st-nav-tab">Trắc nghiệm</button>
        </nav>

        <main>
            <!-- View: Quản lý danh sách -->
            <div id="manage-view" class="st-view-content">
                <h2 style="font-size: 1.8em; margin-bottom: 20px;">Danh sách ôn tập của bạn (<span id="term-count">0</span>)</h2>
                <div id="glossary-list"></div>
            </div>

            <!-- View: Flashcards -->
            <div id="flashcards-view" class="st-view-content hidden">
                 <div id="flashcard-content">
                    <div class="card-container">
                        <div class="card-inner">
                            <div class="card-front"></div>
                            <div class="card-back"></div>
                        </div>
                    </div>
                    <div class="flashcard-nav">
                        <button id="prev-card" class="st-button">&larr; Trước</button>
                        <p id="card-counter"></p>
                        <button id="next-card" class="st-button">Sau &rarr;</button>
                    </div>
                </div>
                <div id="no-flashcard-terms" class="hidden">
                    <p>Chưa có thuật ngữ nào. Hãy lưu ít nhất một mục từ để bắt đầu.</p>
                </div>
            </div>

            <!-- View: Quiz -->
            <div id="quiz-view" class="st-view-content hidden">
                <div id="start-quiz-container">
                     <h2 style="font-size: 1.8em; margin-bottom: 15px;">Sẵn sàng kiểm tra?</h2>
                     <p id="quiz-instructions" style="margin-bottom: 20px;"></p>
                     <button id="start-quiz-btn" style="padding: 12px 25px; font-size: 1.2em; background-color: #38a169; color: white; border: none; border-radius: 8px; cursor:pointer;">Bắt đầu</button>
                </div>
                <div id="quiz-main-content" class="hidden">
                    <div id="quiz-question-area">
                        <p id="question-counter"></p>
                        <p id="question-text" style="font-size: 1.2em; font-weight: bold; margin-bottom: 20px;"></p>
                        <div id="options-container"></div>
                    </div>
                    <div id="quiz-results" class="hidden">
                        <h2 style="font-size: 1.8em;">Hoàn thành!</h2>
                        <p>Điểm của bạn: <span id="score" style="font-weight: bold;"></span></p>
                        <button id="restart-quiz">Làm lại</button>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const app = document.getElementById('study-tool-app');
        if (!app) return;

        let glossaryData = [];
        let currentCardIndex = 0;
        let quizQuestions = [];
        let currentQuestionIndex = 0;
        let score = 0;

        const views = {
            manage: app.querySelector('#manage-view'),
            flashcards: app.querySelector('#flashcards-view'),
            quiz: app.querySelector('#quiz-view'),
        };
        const navTabs = app.querySelectorAll('.st-nav-tab');
        const termCountEl = app.querySelector('#term-count');
        const glossaryListEl = app.querySelector('#glossary-list');

        // --- DATA FUNCTIONS ---
        function loadData() {
            const savedData = localStorage.getItem('myStudyList');
            glossaryData = savedData ? JSON.parse(savedData) : [];
            renderManageList();
        }

        function saveData() {
            localStorage.setItem('myStudyList', JSON.stringify(glossaryData));
            renderManageList();
        }
        
        function renderManageList() {
            glossaryListEl.innerHTML = '';
            termCountEl.textContent = glossaryData.length;
            if (glossaryData.length === 0) {
                glossaryListEl.innerHTML = `<p>Danh sách của bạn đang trống. Hãy vào một mục từ bất kỳ và nhấn "Lưu vào danh sách ôn tập" để thêm vào đây.</p>`;
                return;
            }
            glossaryData.forEach((item, index) => {
                const div = document.createElement('div');
                div.className = 'st-term-item';
                div.innerHTML = `
                    <div class="st-term-content">
                        <h3>${escapeHtml(item.term)}</h3>
                        <p>${escapeHtml(item.definition)}</p>
                    </div>
                    <button data-index="${index}" class="st-delete-btn">&times;</button>
                `;
                glossaryListEl.appendChild(div);
            });
        }

        // --- UI/VIEW MANAGEMENT ---
        function switchView(viewName) {
            Object.values(views).forEach(v => v.classList.add('hidden'));
            views[viewName].classList.remove('hidden');
            navTabs.forEach(t => {
                t.classList.toggle('active', t.dataset.view === viewName);
            });
            if (viewName === 'flashcards') initFlashcards();
            if (viewName === 'quiz') initQuizView();
        }
        
        navTabs.forEach(tab => tab.addEventListener('click', () => switchView(tab.dataset.view)));
        
        glossaryListEl.addEventListener('click', (e) => {
            if (e.target.classList.contains('st-delete-btn')) {
                const index = parseInt(e.target.dataset.index);
                glossaryData.splice(index, 1);
                saveData();
            }
        });

        // --- FLASHCARD LOGIC ---
        const fc = {
            content: app.querySelector('#flashcard-content'),
            noTerms: app.querySelector('#no-flashcard-terms'),
            container: app.querySelector('.card-container'),
            front: app.querySelector('.card-front'),
            back: app.querySelector('.card-back'),
            counter: app.querySelector('#card-counter'),
            prevBtn: app.querySelector('#prev-card'),
            nextBtn: app.querySelector('#next-card')
        };
        
        function initFlashcards() {
            if (glossaryData.length > 0) {
                fc.content.style.display = 'block';
                fc.noTerms.style.display = 'none';
                currentCardIndex = 0;
                displayCard();
            } else {
                fc.content.style.display = 'none';
                fc.noTerms.style.display = 'block';
            }
        }

        function displayCard() {
            if (fc.container.classList.contains('flipped')) {
                 fc.container.classList.remove('flipped');
            }
            setTimeout(() => {
                const card = glossaryData[currentCardIndex];
                fc.front.textContent = card.term;
                fc.back.textContent = card.definition;
                fc.counter.textContent = `${currentCardIndex + 1} / ${glossaryData.length}`;
            }, 200);
        }

        fc.container.addEventListener('click', () => fc.container.classList.toggle('flipped'));
        fc.nextBtn.addEventListener('click', () => { currentCardIndex = (currentCardIndex + 1) % glossaryData.length; displayCard(); });
        fc.prevBtn.addEventListener('click', () => { currentCardIndex = (currentCardIndex - 1 + glossaryData.length) % glossaryData.length; displayCard(); });

        // --- QUIZ LOGIC ---
        const qz = {
            startContainer: app.querySelector('#start-quiz-container'),
            startBtn: app.querySelector('#start-quiz-btn'),
            instructions: app.querySelector('#quiz-instructions'),
            main: app.querySelector('#quiz-main-content'),
            questionArea: app.querySelector('#quiz-question-area'),
            counter: app.querySelector('#question-counter'),
            text: app.querySelector('#question-text'),
            options: app.querySelector('#options-container'),
            results: app.querySelector('#quiz-results'),
            score: app.querySelector('#score'),
            restartBtn: app.querySelector('#restart-quiz')
        };

        function initQuizView() {
            qz.startContainer.style.display = 'block';
            qz.main.classList.add('hidden');
            qz.results.classList.add('hidden');
            qz.questionArea.style.display = 'block';

            if (glossaryData.length < 4) {
                qz.startBtn.disabled = true;
                qz.startBtn.style.opacity = '0.5';
                qz.instructions.textContent = `Bạn cần ít nhất 4 mục từ trong danh sách để tạo trắc nghiệm. Hiện tại bạn có ${glossaryData.length}.`;
            } else {
                qz.startBtn.disabled = false;
                qz.startBtn.style.opacity = '1';
                qz.instructions.textContent = 'Bài trắc nghiệm sẽ được tạo ngẫu nhiên từ danh sách của bạn.';
            }
        }
        
        qz.startBtn.addEventListener('click', startQuiz);
        qz.restartBtn.addEventListener('click', initQuizView);
        
        function startQuiz() {
            qz.startContainer.style.display = 'none';
            qz.main.classList.remove('hidden');
            score = 0;
            currentQuestionIndex = 0;
            
            const shuffled = [...glossaryData].sort(() => 0.5 - Math.random());
            quizQuestions = shuffled.map(item => {
                const correctAnswer = item.term;
                const otherTerms = glossaryData.filter(d => d.term !== correctAnswer).map(d => d.term);
                const options = [...otherTerms].sort(() => 0.5 - Math.random()).slice(0, 3);
                options.push(correctAnswer);
                return { question: item.definition, options: options.sort(() => 0.5 - Math.random()), answer: correctAnswer };
            });

            displayQuizQuestion();
        }

        function displayQuizQuestion() {
            if (currentQuestionIndex >= quizQuestions.length) {
                showQuizResults();
                return;
            }
            const q = quizQuestions[currentQuestionIndex];
            qz.counter.textContent = `Câu ${currentQuestionIndex + 1} / ${quizQuestions.length}`;
            qz.text.textContent = q.question;
            qz.options.innerHTML = q.options.map(opt => `<button class="quiz-option-btn">${escapeHtml(opt)}</button>`).join('');
            qz.options.querySelectorAll('button').forEach(btn => btn.addEventListener('click', (e) => checkAnswer(e.target, q.answer)));
        }
        
        function checkAnswer(btn, correct) {
            qz.options.querySelectorAll('button').forEach(b => b.disabled = true);
            if(btn.textContent === correct) {
                score++;
                btn.classList.add('correct');
            } else {
                btn.classList.add('wrong');
                qz.options.querySelectorAll('button').forEach(b => {
                    if (b.textContent === correct) b.classList.add('correct');
                });
            }
            setTimeout(() => { currentQuestionIndex++; displayQuizQuestion(); }, 1500);
        }

        function showQuizResults() {
            qz.questionArea.style.display = 'none';
            qz.results.classList.remove('hidden');
            qz.score.textContent = `${score} / ${quizQuestions.length}`;
        }
        
        // --- UTILS ---
        function escapeHtml(str) { return str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;"); }

        // --- INIT ---
        loadData();
        switchView('manage');
    });
    </script>
    <?php
    // Trả về HTML đã được tạo
    return ob_get_clean();
}
